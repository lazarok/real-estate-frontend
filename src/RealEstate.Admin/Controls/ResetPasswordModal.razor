@inject IHttpService _httpService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IJwtAuthenticationStateProvider _jwtAuthenticationStateProvider
@inject IStringLocalizer<GlobalStrings> _localizer
@inject IToastService _toastService
@inject IConfiguration _configuration

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" role="dialog" id="modal-@_id">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down" role="document">
        <div class="modal-content">
            @if (_model == null)
            {
                <Loading/>
            }
            else
            {
                <EditForm Model="_model" OnValidSubmit="Submit">
                    <FluentValidationValidator/>
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">
                            @_localizer["Reset Password"]
                        </h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">

                        <div class="row mb-3 align-items-center">
                            <label class="col-md-3 form-label">@_localizer["Email"]</label>
                            <div class="col-md-9">
                                <InputText readonly="true" class="form-control" @bind-Value="_email"/>
                            </div>
                        </div>

                        <div class="row mb-3 align-items-center">
                            <label class="col-md-3 form-label">@_localizer["New Password"]</label>
                            <div class="col-md-9">
                                <div class="input-group mb-1">
                                    <i class="ai-lock position-absolute top-50 start-0 translate-middle-y ms-3"></i>
                                    <div class="password-toggle w-100">
                                        <InputText class="form-control" type="password" maxlength="16" placeholder=@_localizer["Enter new password"] @bind-Value="@_model.NewPassword"/>
                                        <label class="password-toggle-btn" aria-label="Show/hide password">
                                            <input class="password-toggle-check" type="checkbox"><span class="password-toggle-indicator"></span>
                                        </label>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => _model.NewPassword)"/>
                            </div>
                        </div>

                        <div class="row mb-3 align-items-center">
                            <label class="col-md-3 form-label">@_localizer["Confirm New Password"]</label>
                            <div class="col-md-9">
                                <div class="input-group mb-1">
                                    <i class="ai-lock position-absolute top-50 start-0 translate-middle-y ms-3"></i>
                                    <div class="password-toggle w-100">
                                        <InputText class="form-control" type="password" placeholder=@_localizer["Repeat new password"] @bind-Value="@_model.ConfirmNewPassword"/>
                                        <label class="password-toggle-btn" aria-label="Show/hide password">
                                            <input class="password-toggle-check" type="checkbox"><span class="password-toggle-indicator"></span>
                                        </label>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => _model.ConfirmNewPassword)"/>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <ErrorMessage Message="@_errorMessage"></ErrorMessage>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary px-4 me-2" data-bs-dismiss="modal">@_localizer["Close"]</button>
                        <ButtonRE IsBusy="_isBusy" class="btn btn-primary px-4" type="submit">@_localizer["Save"]</ButtonRE>
                    </div>

                </EditForm>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnSubmitted { get; set; }
    
    [Parameter]
    public string BaseUrl { get; set; }

    private readonly Guid _id = Guid.NewGuid();

    private string _sku;
    private string _email;

    private ResetPasswordModel _model;

    private bool _isBusy;
    private string _errorMessage;

    public async Task Show(string sku, string email)
    {
        _sku = sku;
        _email = email;

        _model = new();

        await _jsRuntime.InvokeAsync<object>("showModal", $"modal-{_id}");
        StateHasChanged();
    }

    private async Task Submit()
    {
        if (_sku == null)
        {
            return;
        }

        _errorMessage = null;

        _isBusy = true;
        var response = await _httpService.PutAsync($"{BaseUrl}/{_sku}/resetpassword", _model);
        _isBusy = false;

        if (response.Success)
        {
            await _jsRuntime.InvokeAsync<object>("hideModal", $"modal-{_id}");
            await OnSubmitted.InvokeAsync();
        }
        else
        {
            _errorMessage = response.Error.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initPasswordVisibilityToggle");
    }

}