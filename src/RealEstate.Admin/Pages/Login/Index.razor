@page "/login"
@using RealEstate.Admin.Services
@using Microsoft.Extensions.Localization
@using RealEstate.Admin.Models
@using RealEstate.Shared.Resources

@inject IHttpService _httpService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IJwtAuthenticationStateProvider _jwtAuthenticationStateProvider
@inject IStringLocalizer<GlobalStrings> _localizer
@inject IConfiguration _configuration

@layout MainLayout

<RedirectLogged RedirectUrl="/"></RedirectLogged>

<!-- Page content-->
<!-- Background image-->
<div class="d-none d-md-block position-absolute w-50 h-100 bg-size-cover" style="top: 0; right: 0; background-image: url(assets/img/property-img-2.jpg);"></div>
<!-- Actual content-->
<section class="container d-flex align-items-center pt-7 pb-3 pb-md-4" style="flex: 1 0 auto;">
  <div class="w-100 pt-3">
    <div class="row">
      <div class="col-lg-4 col-md-6 offset-lg-1">
        <!-- Sign in view-->
        <div class="view show" id="signin-view">
          <h1 class="h2">@_configuration["Name"] <span class="text-muted">/ @_localizer["Admin"]</span></h1>
          <p class="fs-ms text-muted mb-4">@_localizer["Sign in to your account using email and password provided during registration"].</p>
          <EditForm Model="_model" OnValidSubmit="LoginSubmitAsync">
            <FluentValidationValidator />
            <div class="input-group mb-1">
              <i class="ai-mail position-absolute top-50 start-0 translate-middle-y ms-3"></i>
              <InputText class="form-control rounded" type="email" placeholder=@_localizer["Email"] @bind-Value="@_model.Email" />
            </div>
            <div class="mb-3">
              <ValidationMessage For="@(() => _model.Email)"/>
            </div>

            <div class="input-group mb-1">
              <i class="ai-lock position-absolute top-50 start-0 translate-middle-y ms-3"></i>
              <div class="password-toggle w-100">
                <InputText class="form-control" type="password" placeholder=@_localizer["Password"] @bind-Value="@_model.Password"/>
                <label class="password-toggle-btn" aria-label="Show/hide password">
                  <input class="password-toggle-check" type="checkbox"><span class="password-toggle-indicator"></span>
                </label>
              </div>
            </div>
            <div class="mb-3">
              <ValidationMessage For="@(() => _model.Password)"/>
            </div>
            
            <div class="d-flex justify-content-end align-items-center mb-3 pb-1">
              <a class="nav-link-style fs-ms" href="login">@_localizer["Forgot password"]?</a>
            </div>
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
              <ErrorMessage Message="@_errorMessage"></ErrorMessage>
            }
            <ButtonRE IsBusy="_isBusy" class="btn btn-primary d-block w-100" type="submit">@_localizer["Sign in"]</ButtonRE>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</section>


@code {

  private bool _isBusy;
  private string _errorMessage;
  private readonly LoginModel _model = new();
  
  private async Task LoginSubmitAsync()
  {
    _errorMessage = null;

    _isBusy = true;
    var response = await _httpService.PostAsync<TokenModel>("auth/login", _model);
    _isBusy = false;

    if (response.Success)
    {
      await _jwtAuthenticationStateProvider.LoginAsync(response.Data);
      _navigationManager.NavigateTo("/");
    }
    else
    {
      _errorMessage = response.Error?.Message;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await _jsRuntime.InvokeVoidAsync("initPasswordVisibilityToggle");
  }

}