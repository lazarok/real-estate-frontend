@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using RealEstate.Admin.Models
@using RealEstate.Admin.Services
@using RealEstate.Shared.Resources

@inject IHttpService _httpService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IJwtAuthenticationStateProvider _jwtAuthenticationStateProvider
@inject IStringLocalizer<GlobalStrings> _localizer
@inject IConfiguration _configuration

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" role="dialog" id="modal-@_id">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down" role="document">
        <div class="modal-content">
            @if (_model == null)
            {
                <Loading/>
            }
            else
            {
                <EditForm Model="_model" OnValidSubmit="Submit">
                    <FluentValidationValidator/>
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">
                            <i class="ai-edit"></i> @_localizer["Edit Admin"]
                        </h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <div class="mb-3 align-items-center">
                            <label class="form-label">@_localizer["Name"]</label>
                            <InputText class="form-control" maxlength="50" placeholder=@_localizer["Enter the name"] @bind-Value="@_model.FullName"/>
                            <ValidationMessage For="@(() => _model.FullName)"/>
                        </div>
                        <div class="mb-3 align-items-center">
                            <label class="form-label">@_localizer["Email"]</label>
                            <InputText class="form-control" type="email" maxlength="50" placeholder=@_localizer["Enter the email"] @bind-Value="@_model.Email"/>
                            <ValidationMessage For="@(() => _model.Email)"/>
                        </div>

                        <div class="mb-3 align-items-center">
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-link align-self-center">Change Password</button>
                                <div class="form-check form-switch align-self-center">
                                    <label class="form-check-label" for="activeSwitch">Active</label>
                                    <InputCheckbox @bind-Value="_active"  class="form-check-input" id="activeSwitch"></InputCheckbox>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <ErrorMessage Message="@_errorMessage"></ErrorMessage>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@_localizer["Close"]</button>
                        <ButtonRE IsBusy="_isBusy" class="btn btn-primary px-4" type="submit">@_localizer["Save"]</ButtonRE>
                    </div>

                </EditForm>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnSubmitted { get; set; }

    private Guid _id = Guid.NewGuid();

    private AdminCreateModel _model;

    private bool _isBusy = false;
    private string _errorMessage;

    bool _active;

    public async Task Show(string adminSku)
    {
        _errorMessage = null;

        _isBusy = true;
        var response = await _httpService.GetAsync<AdminModel>($"admin/v1/admins/{adminSku}");
        _isBusy = false;

        if (response.Success)
        {
            _model = new AdminCreateModel()
            {
                Email = response.Data.Email,
                FullName = response.Data.FullName,
                Password = response.Data.Sku
            };

            _active = false;
            
            await _jsRuntime.InvokeAsync<object>("showModal", $"modal-{_id}");
            StateHasChanged();
        }
        else
        {
            // Use Toast
            _errorMessage = response.Error.ToString();
        }
    }

    private async Task Submit()
    {
    // _errorMessage = null;
    //
    // _isBusy = true;
    // var response = await _httpService.PostAsync($"admin/v1/admins", _model);
    // _isBusy = false;
    //
    // if (response.Success)
    // {
    //     await _jsRuntime.InvokeAsync<object>("hideModal", $"modal-{_id}");
    //     await OnSubmitted.InvokeAsync();
    // }
    // else
    // {
    //     _errorMessage = response.Error.ToString();
    // }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initPasswordVisibilityToggle");
    }

}