@page "/admin/admins"
@page "/admin/admins/{Page:int}"

@using RealEstate.Admin.Models
@using RealEstate.Admin.Services
@using RealEstate.Shared.Resources
@using Microsoft.Extensions.Localization

@inject IHttpService _httpService
@inject IStringLocalizer<GlobalStrings> _localizer
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IJSRuntime _jsRuntime

@layout AdminLayout

@attribute [Authorize(Roles = "SuperAdmin")]

<div class="py-2 p-md-3">
    <!-- Title + Filters-->
    <div class="d-sm-flex align-items-center justify-content-between pb-2">
        <h1 class="h3 mb-3 text-center text-sm-start">@_localizer["Admins"]</h1>
        <div class="mb-3 d-flex justify-content-end">
            <button type="button" class="btn btn-primary" @onclick="ShowCreateAdmin">
                <i class="ai-plus me-2"></i>@_localizer["Add admin"]
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <ErrorMessage Message="@_errorMessage"/>
    }
    else
    {
        if (_admins == null)
        {
            <Loading/>
        }
        else
        {
            <div class="d-flex align-items-center w-100 mb-3">
                <form class="w-100" @onsubmit=SearchAdmins>
                    <div class="input-group">
                        @if (!_isBusy)
                        {
                            <button class="btn btn-white btn-icon border" type="submit">
                                <i class="ai-search text-primary"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-white btn-icon border" type="button">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            </button>
                        }
                        <input class="form-control" type="text" placeholder="@($"{_localizer["Search by name or email"]} ...")" autocomplete="off" @bind-value="_search">
                    </div>
                </form>
            </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                    <tr>
                        <th>@_localizer["Name"]</th>
                        <th>@_localizer["Email"]</th>
                        <th>@_localizer["Active"]</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_admins.List.Count == 0)
                    {
                        <tr>
                            <td colspan="4">
                                <div class="my-2">
                                    <NotContent/>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        foreach (var admin in _admins.List)
                        {
                            <tr>
                                <td class="align-middle">@admin.FullName</td>
                                <td class="align-middle">@admin.Email</td>
                                <td class="align-middle">
                                    <div class="d-flex align-content-center">
                                        @if (admin.Active)
                                        {
                                            <div class="d-inline-flex d-flex align-items-center bg-faded-success text-success fs-xs fw-medium py-1 px-3 rounded-1">
                                                @_localizer["Active"]
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-inline-flex d-flex align-items-center bg-faded-danger text-danger fs-xs fw-medium py-1 px-3 rounded-1">
                                                @_localizer["Inactive"]
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td class="align-middle text-end">
                                    <button type="button" class="btn btn-secondary btn-icon" @onclick="() => ShowEditAdmin(admin.Sku)">
                                        <i class="ai-edit"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="mt-2"/>
            <Pagination Processing="_isBusy" BaseUrl="/admin/admins" PagedList="_admins" OnPageChanged="PageChanged"/>
        }
    }


</div>

<AdminLayoutSetter></AdminLayoutSetter>

@code {

    [Parameter]
    public int Page { get; set; }

    private string _errorMessage;
    private bool _isBusy;
    private bool _isBusyEdit;
    private string _search;
    private PagedList<AdminModel> _admins;
    
    protected override async Task OnInitializedAsync()
    {
        if (Page < 1)
        {
            Page = 1;
            _navigationManager.NavigateTo("/admin/admins/1");
        }
        
        await LoadAdmins();
    }
    
    private async Task LoadAdmins()
    {
        _errorMessage = null;
        
        var url = string.IsNullOrWhiteSpace(_search) ? $"admin/v1/admins?pageNumber={Page}" : $"admin/v1/admins?pageNumber={Page}&search={_search}";

        _isBusy = true;
        var response = await _httpService.GetAsync<PagedList<AdminModel>>(url);
        _isBusy = false;

        if (response.Success)
        {
            _admins = response.Data;
        }
        else
        {
            _errorMessage = response.Error.ToString();
        }
    }

    private async Task SearchAdmins()
    {
        _navigationManager.NavigateTo("/admin/admins/1");
        await PageChanged(1);
    }

    private async Task PageChanged(int page)
    {
        Page = page;
        await LoadAdmins();
    }

    private void ShowCreateAdmin()
    {
        _navigationManager.NavigateTo($"admin/admins/create");
    }

    private async Task ShowEditAdmin(string adminSku)
    {
        _navigationManager.NavigateTo($"admin/admins/edit/{adminSku}");
    }

}