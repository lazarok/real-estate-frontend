@page "/admin/admins/edit/{AdminSku}"

@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using RealEstate.Admin.Models
@using RealEstate.Admin.Services
@using RealEstate.Shared.Resources

@inject IHttpService _httpService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IJwtAuthenticationStateProvider _jwtAuthenticationStateProvider
@inject IStringLocalizer<GlobalStrings> _localizer
@inject IToastService _toastService
@inject IConfiguration _configuration

@layout AdminLayout

@attribute [Authorize(Roles = "SuperAdmin")]

<div class="py-2 p-md-3">
    <!-- Title + Filters-->
    <div class="d-sm-flex align-items-center justify-content-between pb-2">
        <h1 class="h3 mb-3 text-center text-sm-start">@_localizer["Edit Admin"]</h1>
    </div>

    @if (_model == null)
    {
        <Loading/>
    }
    else
    {
        <EditForm Model="_model" OnValidSubmit="Submit">
            <FluentValidationValidator/>

            <div class="mb-3 align-items-center">
                <label class="form-label">@_localizer["Name"]</label>
                <InputText class="form-control" maxlength="50" placeholder=@_localizer["Enter the name"] @bind-Value="@_model.FullName"/>
                <ValidationMessage For="@(() => _model.FullName)"/>
            </div>
            <div class="mb-3 align-items-center">
                <label class="form-label">@_localizer["Email"]</label>
                <InputText class="form-control" type="email" maxlength="50" placeholder=@_localizer["Enter the email"] @bind-Value="@_model.Email"/>
                <ValidationMessage For="@(() => _model.Email)"/>
            </div>

            <div class="mb-3 align-items-center">
                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-link align-self-center" @onclick="ResetPassword">Change Password</button>
                    <div class="form-check form-switch align-self-center">
                        <label class="form-check-label" for="activeSwitch">Active</label>
                        <InputCheckbox @bind-Value="_model.Active" class="form-check-input" id="activeSwitch"></InputCheckbox>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <ErrorMessage Message="@_errorMessage"></ErrorMessage>
            }

            <div class="d-flex w-100 mt-md-6">
                <div class="flex-grow-1">
                    <ButtonRE class="btn btn-translucent-danger" OnClick="ShowDelete">@_localizer["Delete"]</ButtonRE>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary px-4 me-2" @onclick="@(() => _navigationManager.NavigateTo($"admin/admins"))">@_localizer["Close"]</button>
                    <ButtonRE IsBusy="_isBusy" class="btn btn-primary px-4" type="submit">@_localizer["Save"]</ButtonRE>
                </div>
            </div>
        </EditForm>
    }

</div>

<AdminLayoutSetter>
    <ModalSection>
        <ResetPasswordModal @ref="_resetPasswordModal" OnSubmitted="ResetPasswordSubmittedAsync"></ResetPasswordModal>
        <Modal @ref="_confirmDelete" ContentBtnAppearance="btn-danger" CloseText="@_localizer["No"]" OkText="@_localizer["Yes"]" OnOk="@DeleteAdmin" AutoHide="true">
            <h5 class="text-danger">@_localizer["Are you sure you want to delete this admin?"]</h5>
            <div class="mt-2">
                @(($"{_localizer["User will be deleted and cannot be recovered"]}."))
            </div>
        </Modal>
    </ModalSection>
</AdminLayoutSetter>

@code {

    [CascadingParameter]
    public AdminLayout Layout { get; set; }

    [Parameter]
    public string AdminSku { get; set; }

    private Modal _confirmDelete;
    private ResetPasswordModal _resetPasswordModal;

    private AdminUpdateModel _model;

    private bool _isBusy;
    private bool _isBusyResetPassword;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadAdmin();
    }

    private async Task LoadAdmin()
    {
        _errorMessage = null;

        _isBusy = true;
        var response = await _httpService.GetAsync<AdminModel>($"admin/v1/admins/{AdminSku}");
        _isBusy = false;

        if (response.Success)
        {
            _model = new AdminUpdateModel()
            {
                Email = response.Data.Email,
                FullName = response.Data.FullName,
                Active = response.Data.Active
            };
        }
        else
        {
            _errorMessage = response.Error.ToString();
        }
    }

    private async Task Submit()
    {
        _errorMessage = null;

        _isBusy = true;
        var response = await _httpService.PutAsync($"admin/v1/admins/{AdminSku}", _model);
        _isBusy = false;

        if (response.Success)
        {
            _navigationManager.NavigateTo($"admin/admins");
            _toastService.Show(body: _localizer["Admin has been edited successfully"], type: ToastType.Success);
        }
        else
        {
            if (response.Error.Status == "NotFound")
            {
                _navigationManager.NavigateTo($"admin/admins");
                return;
            }
            _errorMessage = response.Error.ToString();
        }
    }

    private async Task ResetPassword()
    {
        if (_isBusyResetPassword)
        {
            return;
        }

        _isBusyResetPassword = true;
        await _resetPasswordModal.Show(AdminSku, _model.Email);
        _isBusyResetPassword = false;
    }

    private async Task DeleteAdmin()
    {
        await _confirmDelete.Hide();
        
        _errorMessage = null;

        _isBusy = true;
        var response = await _httpService.DeleteAsync($"admin/v1/admins/{AdminSku}");
        _isBusy = false;

        if (response.Success)
        {
            _navigationManager.NavigateTo($"admin/admins");
            _toastService.Show(body: _localizer["Admin has been delete successfully"], type: ToastType.Success);
        }
        else
        {
            _errorMessage = response.Error.ToString();
        }
    }
    
    private void ResetPasswordSubmittedAsync()
    {
        _toastService.Show(body: _localizer["Reset password successfully"], type:ToastType.Success);
    }

    private async Task ShowDelete()
    {
        if (_confirmDelete == null)
        {
            Console.WriteLine("_confirmDelete == null");
            return;
        }
        await _confirmDelete.Show();
    }

}